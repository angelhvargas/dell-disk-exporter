name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch:
        - amd64
        - arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build binary
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            CC=aarch64-linux-gnu-gcc make build ARCH=arm64
          else
            make build ARCH=amd64
          fi
        env:
          GOARCH: ${{ matrix.arch }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: dell-disk-exporter-${{ matrix.arch }}
          path: ./build/dell-disk-exporter-${{ matrix.arch }}
          if-no-files-found: error

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run tests and collect coverage
        run: |
          make test
          make coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/coverage.html

  release:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: ./release
          pattern: dell-disk-exporter-*
          merge-multiple: true

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage

      - run: ls -R ./release

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              ./release/dell-disk-exporter-amd64#dell-disk-exporter-amd64 \
              ./release/dell-disk-exporter-arm64#dell-disk-exporter-arm64 \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes
